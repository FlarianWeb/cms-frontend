name: Pull Request Tests

on:
    pull_request:
        branches: ['master']

jobs:
    unit_test:
        runs-on: ubuntu-latest

        strategy:
            matrix:
                node-version: [16.x, 18.x, 20.x]

        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Set up Node.js v.${{ matrix.node-version }}
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ matrix.node-version }}

            - uses: pnpm/action-setup@v3
              name: Install pnpm
              with:
                  version: 8
                  run_install: false

            - name: Install dependencies
              run: pnpm install

            - name: Create log directory
              run: mkdir log

            - name: Run tests
              run: pnpm test:unit --reporter=basic 1> log/unit.log

            - name: Generate report
              run: |
                  echo "*Node.js version:* ${{ matrix.node-version }}" >> ${{ matrix.node-version }}_report.txt
                  echo "*Test results:*" >> ${{ matrix.node-version }}_report.txt
                  tail -n +7 log/unit.log >> ${{ matrix.node-version }}_report.txt
                  sed -i 's/\x1B\[[0-9;]*[JKmsu]//g' ${{ matrix.node-version }}_report.txt
                  echo "" >> ${{ matrix.node-version }}_report.txt
                  echo "::set-output name=report_path::${{ matrix.node-version }}_report.txt"

            - name: Upload report artifact
              uses: actions/upload-artifact@v2
              with:
                  name: reports
                  path: '*.txt'

    send_telegram_notify:
        needs: unit_test
        runs-on: ubuntu-latest

        steps:
            - name: Download report artifact
              uses: actions/download-artifact@v2
              with:
                  name: reports

            - name: Concatenate reports
              run: |
                  cat *.txt > test_report.log

            - name: Debug test_report.log
              run: cat test_report.log

            - name: Prepare message
              run: |
                  author="${{ github.actor }}"
                  repository="${{ github.repository }}"
                  commitUrl="https://github.com/${{ github.repository }}/commit/${{ github.sha }}"

                  message="
                  *Запрос на слияние*
                  *$repository*

                  *Автор:* $author
                  [Перейти к коммиту]($commitUrl)

                  *Результаты тестирования:*
                  ```$(cat test_report.log)```
                  "

                  echo "$message" > message.txt

            # - name: Send telegram notify
            #   run: |
            #       curl -s -X POST \
            #       -F "chat_id=${{ secrets.TELEGRAM_NOTIFY_CHAT_ID }}" \
            #       -F "document=@test_report.log" \
            #       -F "caption=$(cat message.txt)" \
            #       -F "parse_mode=Markdown" \
            #       -F "message_thread_id=${{ secrets.TELEGRAM_NOTIFY_THEME_AUTOTEST }}" \
            #       "https://api.telegram.org/bot${{ secrets.TELEGRAM_NOTIFY_TOKEN }}/sendDocument"

            - name: Send telegram notify
              run: |
                  curl -s -X POST \
                  -d "chat_id=${{ secrets.TELEGRAM_NOTIFY_CHAT_ID }}" \
                  -d "message_thread_id=${{ secrets.TELEGRAM_NOTIFY_THEME_AUTOTEST }}" \
                  -d "text=$(cat message.txt)" \
                  -d "parse_mode=Markdown" \
                  -o response.json \
                  "https://api.telegram.org/bot${{ secrets.TELEGRAM_NOTIFY_TOKEN }}/sendMessage"

            - name: Check response
              run: cat response.json
