# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Pull Request Tests

on:
    pull_request:
        branches: ['master']

jobs:
    unit_test:
        runs-on: ubuntu-latest

        strategy:
            matrix:
                node-version: [16.x, 18.x, 20.x]

        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Set up Node.js v.${{ matrix.node-version }}
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ matrix.node-version }}

            - uses: pnpm/action-setup@v3
              name: Install pnpm
              with:
                  version: 8
                  run_install: false

            - name: Install dependencies
              run: pnpm install

            - name: Create log directory
              run: mkdir log

            - name: Run tests
              run: pnpm test:unit --reporter=basic 1> log/unit.log

            - name: Debug unit.log
              run: cat log/unit.log

            - name: Generate report
              run: |
                  echo "- Node.js version: ${{ matrix.node-version }}" > report.txt
                  echo "- Test results:" >> report.txt
                  tail -n +7 log/unit.log >> report.txt

            - name: Upload report artifact
              uses: actions/upload-artifact@v2
              with:
                  name: report
                  path: report.txt

            # - name: report
            #   id: report
            #   run: |
            #       report="- Node.js version: ${{ matrix.node-version }} %0A- Test results: %0A $(tail -n +7 log/unit.log)"
            #       echo "::set-output name=report::$report"
            #   echo "::set-output name=report::$report"

            # - name: Send telegram notify
            #   run: |
            #       author="${{ github.actor }}"
            #       repository="${{ github.repository }}"
            #       commitUrl="https://github.com/${{ github.repository }}/commit/${{ github.sha }}"
            #       message="<b>Автор:</b> $author %0A"
            #       message="$message<b>Репозиторий:</b> $repository %0A"
            #       message="$message<b>Изменения:</b> $commitUrl %0A"
            #       message="$message<code>${{ steps.report.outputs.report }}</code>"

            #       curl -s -X POST \
            #         -d "chat_id=${{ secrets.TELEGRAM_NOTIFY_CHAT_ID }}" \
            #         -d "message_thread_id=${{ secrets.TELEGRAM_NOTIFY_THEME_AUTOTEST }}" \
            #         -d "text=$message" \
            #         -d "parse_mode=html" \
            #         "https://api.telegram.org/bot${{ secrets.TELEGRAM_NOTIFY_TOKEN }}/sendMessage"

    send_telegram_notify:
        needs: unit_test
        runs-on: ubuntu-latest

        steps:
            - name: Download report artifact
              uses: actions/download-artifact@v2
              with:
                  name: report

            - name: Prepare message
              run: |
                  author="${{ github.actor }}"
                  repository="${{ github.repository }}"
                  commitUrl="https://github.com/${{ github.repository }}/commit/${{ github.sha }}"
                  message="<b>Новый запрос на слияние</b> %0A"
                  message="$message<b>Автор:</b> $author %0A"
                  message="$message<b>$repository</b> %0A"
                  message="$message<b>Ревью:</b> <a href="$commitUrl">Перейти к коммиту</a> %0A"
                  report=$(cat report.txt)
                  report="${report//'%'/'%25'}"
                  report="${report//$'\n'/'%0A'}"
                  report="${report//$'\r'/'%0D'}"
                  report="${report//'>'/'&gt;'}"
                  message="$message%0A%0A$report"

                  echo "$message" > message.txt

            - name: Send telegram notify
              run: |
                  curl -s -X POST \
                  -d "chat_id=${{ secrets.TELEGRAM_NOTIFY_CHAT_ID }}" \
                  -d "message_thread_id=${{ secrets.TELEGRAM_NOTIFY_THEME_AUTOTEST }}" \
                  -d "text=$(cat message.txt)" \
                  -d "parse_mode=html" \
                  -o response.json \
                  "https://api.telegram.org/bot${{ secrets.TELEGRAM_NOTIFY_TOKEN }}/sendMessage"

            - name: Check response
              run: cat response.json

            # - name: Send telegram notify
            #   run: |
            #       author="${{ github.actor }}"
            #       repository="${{ github.repository }}"
            #       commitUrl="https://github.com/${{ github.repository }}/commit/${{ github.sha }}"
            #       message="<b>Новый запрос на слияние</b> %0A"
            #       message="$message<b>Автор:</b> $author %0A"
            #       message="$message<b>Репозиторий:</b> $repository %0A"
            #       message="$message<b>Ревью:</b> <a href="$commitUrl">Перейти к коммиту</a> %0A"
            #       message="$message<code>$(cat report.txt)</code>"

            #       curl -s -X POST \
            #       -d "chat_id=${{ secrets.TELEGRAM_NOTIFY_CHAT_ID }}" \
            #       -d "message_thread_id=${{ secrets.TELEGRAM_NOTIFY_THEME_AUTOTEST }}" \
            #       -d "text=$message" \
            #       -d "parse_mode=html" \
            #       "https://api.telegram.org/bot${{ secrets.TELEGRAM_NOTIFY_TOKEN }}/sendMessage"
