# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Pull Request Tests

on:
    pull_request:
        branches: ['master']

jobs:
    unit_test:
        runs-on: ubuntu-latest

        strategy:
            matrix:
                node-version: [16.x, 18.x, 20.x]

        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Set up Node.js v.${{ matrix.node-version }}
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ matrix.node-version }}

            # - name: Install jq
            #   run: |
            #       wget -O jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
            #       chmod +x jq
            #       sudo mv jq /usr/local/bin/

            - uses: pnpm/action-setup@v3
              name: Install pnpm
              with:
                  version: 8
                  run_install: false

            - name: Install dependencies
              run: pnpm install

            - name: Create log directory
              run: mkdir log

            - name: Run tests
              run: pnpm test:unit --reporter=basic 1> log/unit.log

            - name: Debug unit.log
              run: cat log/unit.log

            - name: report
              run: |
                  report="- Node.js version: ${{ matrix.node-version }} %0A- Test results: %0A $(tail -n +7 log/unit.log)"
                  echo "::set-output name=report::$report"

            - name: Send telegram notify
              run: |
                  author="${{ github.actor }}"
                  repository="${{ github.repository }}"
                  commitUrl="https://github.com/${{ github.repository }}/commit/${{ github.sha }}"
                  message="<b>–ê–≤—Ç–æ—Ä:</b> $author %0A"
                  message="$message <b>–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:</b> $repository %0A"
                  message="$message <b>–ò–∑–º–µ–Ω–µ–Ω–∏—è:</b> $commitUrl %0A"
                  message="$message <code>${{ steps.report.outputs.report }}</code>"

                  curl -s -X POST \
                    -d "chat_id=${{ secrets.TELEGRAM_NOTIFY_CHAT_ID }}" \
                    -d "message_thread_id=${{ secrets.TELEGRAM_NOTIFY_THEME_AUTOTEST }}" \
                    -d "text=$message" \
                    -d "parse_mode=html" \
                    "https://api.telegram.org/bot${{ secrets.TELEGRAM_NOTIFY_TOKEN }}/sendMessage"

        # - uses: pnpm/action-setup@v3
        #   name: Install pnpm
        #   with:
        #     version: 8
        #     run_install: false

        # - name: Install dependencies
        #   run: pnpm install

        # - name: Unit run
        #   run: pnpm test:unit --silent --reporter json --outputFile log/unit-log.json

        # - name: Create test report
        #   uses: actions/github-script@v7
        #   id: unit-test-report
        #   with:
        #     result-encoding: string
        #     script: |
        #       try {
        #         const fs = require('fs')
        #         const unitLogJson = fs.readFileSync('./log/unit-log.json')
        #         const parsedLog = JSON.parse(unitLogJson)

        #         let testMessage = '';

        #         testMessage += `<b>–í—Å–µ–≥–æ –Ω–∞–±–æ—Ä–æ–≤ —Ç–µ—Å—Ç–æ–≤:</b> ${parsedLog.numTotalTestSuites}<br>`;
        #         testMessage += `<b>–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–æ:</b> üü¢ ${parsedLog.numPassedTestSuites}<br>`;

        #         return testMessage;
        #       } catch(err) {
        #         core.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–ª–∏ –∞–Ω–∞–ª–∏–∑–µ JSON")
        #         core.setFailed(err)
        #       }

        # - name: Send telegram notify
        #   run: |
        #     msg_text='<b>–ê–≤—Ç–æ—Ä:</b> ${{ github.actor }}<br><b>–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:</b> ${{ github.repository }}<br>–ò–∑–º–µ–Ω–µ–Ω–∏—è: https://github.com/${{ github.repository }}/commit/${{github.sha}}<br>${{steps.result-encoding.outputs.result}}'
        #     curl -s -X POST 'https://api.telegram.org/bot${{ secrets.TELEGRAM_NOTIFY_TOKEN }}/sendMessage' \
        #     -d "chat_id=${{ secrets.TELEGRAM_NOTIFY_CHAT_ID }}&text=${msg_text}&message_thread_id=${{ secrets.TELEGRAM_NOTIFY_THEME_AUTOTEST }}parse_mode=html"
